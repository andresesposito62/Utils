//Indica en carpeta estoy ahora mismo:
pwd

//Para navegar a una carpeta ponemos change directory:
cd 

//Si aparece el simbolo "~" significa que estoy en el hogar de 
//mis documentos, en el hogar de mi usuario

//Si aparece el simbolo "/" quiere decir que estoy en el home
//es decir en la raiz del disco

//para listar los elementos de una carpeta insertamos:
ls

//para listar todos los elementos d euna carpeta incluyendo los
//archivos ocultos:
ls -al

//para limpiar la consola ingresamos:
clear
//o tambien podemos limpiar la consola con:
ctrl+L

//para ir a mi disco duro C
cd /c

//para devolvernos un paso atras:
cd ..

//para crear una carpeta:
mkdir nombreCarpeta

//para crear un archivo sin nada por dentro:
touch vacio.txt

//para ver el contenido de un archivo:
cat nombreDelArchivo

//para ver la historia completa de todos 
//los comandos escritos hasta el momento:
history

//para borrar un archivo:
rm nombreDelArchivoABorrar
//se debe tener cuidado ps se puede borrar el disco duro
//del pc si se ejecuta incorrectamente

//para ver las especifiaciones de cada comando:
comandoGit --help

//Para iniciar Git en una carpeta:
git init

//para ver el status actual:
git status

//para trackear un archivo se inresa:
git add historia

//para sacar un archivo del trackeo:
git rm --cached historia.txt

//para hacer commit:
git commit -m "Mensaje detallado"

//para ver todas las configuraciones que tiene git actualente:
git config --list

//para cambiar los usuarios globales(correo y usuario)
git config --global user.name  "Andres Esposito"
git config --global user.email "andresesposito62@gmail.com"

//para agregar los cambios de todos los archivos usamos:
git add .

//Para ver la historia de cambios de archivo:
git log historia.txt

//Para ver los cambios en cada commit:
git log --stat

//para ver los cambios que han existido sobre un archivo:
git show nombredelarchivo

//para ver la diferencia entre una version anterior
// y la version actual:
diff --git a/nombredelarchivo b/nombredelarchivo

//paraver la diferencia entre dos commits:
git diff idcommitaA idcommitB

//VIM: editor de texto de la consola
//para enviar el commit y salir del Vim:
Esc +shift +zz 

//para volver  a un commit anterior sin guardar nada en staging
//Se debetener cuidado porque esto borra todos los commits anteriores
git reset ideDelCommit --hard

//para volver a un commit guardando los datos de stagin(los de add .)
git reset ideDelCommit --soft

//para ver la diferencia entre el repositorio y lo que esta
//en staging:
git diff

//para ir a un commit especifico y traer un archivo especifico:
git checkout idDelCommit archivoQueSeQuiereDeRegreso

//para volver al master
git checkout master archivoQueSeQuiereIr
 
////para eliminar archivos de Git sin eliminar su historial
//del sistema de versiones, existen dos maneras:

//1)Eliminar los archivos del area de staging y del proximo
// commit pero los mantiene en el disco duro:
git rm --cached

//2)Eliminar los archivos de Git y del disco duro:
git rm --force


//Este comando nos ayuda a volver en el tiempo.
//Pero no como git checkout que nos deja ir, mirar,
// pasear y volver. Con git reset volvemos al pasado sin
//la posibilidad de volver al futuro. Borramos la historia
// y la debemos sobreescribir. No hay vuelta atrás:


*//Para borrar todo el historial y los registros pero guardamos
//los cambios en staging:
git reset --soft

*//Borra todo(borra toda la informacion de los commits y del area
//staging):
git reset --hard

*//Comando para sacar archivos de area se staging(no los borra 
//ni nada, solo para que los ultimos cambios de estos archivos
// no se envien al commit):
git reset HEAD


////////////ESTRUCTURA DE TRABAJO GIT/////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
//                                                                                                                //  
//                                                                                                                //    
//  (Untracked o                 (Tracked o                                                                       //        
//  no rastreado)                rastreado)                                                                       //       
//  //////////////              ///////////////                ///////////////               ///////////////      //
//  //Directorio//              //Preparacion//                //Repositorio//<--git fetch---//Repositorio//      //  
//  //de trabajo//---git add--> //o Staging  //---git comit--> // Local     //---git push--->//Remoto     //      // 
//  //////////////              ///////////////                ///////////////               ///////////////      //
//      ^  ^                                                        |  ^                              |           //
//      |  |_________________________git merge______________________|  |                          git pull        //
//      |                                                              |                              |           //
//      |______________________________________________________________|______________________________|           //                               
//                                                                                                                //         
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Para ver donde esta mi Head(Head= indicador de cual version
 de commit estoy viendo de los ultimos arvhivos que ), usamos el
//comando:
Git show

//Para Crear una nueva rama:
git branch nombreDeLaNuevaRama

//Para moverme a la otra rama usamos:
git checkout nombreDeLaRamaDeseada

//para eliminar los ultimos cambios hechos a un archivo(antes 
// de que hubieramos hecho add):
git restore nombreDelArchivo

//Para sacar de staging algun archivo cambiado cambio(despues de haber hecho add):
git restore --staged Nombre de archivo

//para ver el listado de ramas:
git branch

//para ver las ramas que existen y su historia:
git show-branch --all

//para ver de manera muy visual las ramas:
gitk 

//para realizar un merge nos posicionamos en la rama donde
//queremos que se reciba e ingresamos:
git merge nombreDeLaOtraRama

//Para tomar una rama entera y pegarla de regreso a otra
// rama(para este caso al master) solo se debe usar en repositorios locales, hacerlo para 
//repositorios remotos es muy mala practica. Rebase reescribe
//la historia del repositorio
git rebase master

//para decirle a git que vamos a agregar un origen remoto
//de nuestros archivos(usando HTTPS):
git remote add origin https://github.com/andresesposito62/Utils.git

//Para consultar si tenemos ya un origen remoto:
git remote -v

//para traer los cambios del origen remoto a una rama en
//especifica nuestra(para nuestro caso main), se debe hacer 
//esto antes de hacer un push porque peude que algun compañero
//haya modificado el repositorio remoto y habria conflictos:
git pull origin main

//para enviarle al origen(en este caos a la rama main):
git push origin main

//para generar la llave ssh(con algoritmo rsa, con 
//complejidad 4096) y conectada al correo
//"andresesposito62@gmail.com", debe ser una por
//cada repositorio(si tengo 3 pc son 3 llaves publicas
// y privadas, 1 en cada pc sin compartir por ningun motivo
//la privada)
ssh-keygen -t rsa -b 4096 -C "andresesposito62@gmail.com"

//para verificar que el servidor ssh este encendido:
eval $(ssh-agent -s)

//para agregar la llave privada(nunca se debe mostrar
//ni compartir) al servidor, ~(shortcut para la
//direccion del home)
ssh-add ~/.ssh/id_rsa

//para clonar el proyecto remoto a nuestor equipo local
//usando ssh tomamos el link de clonar por shh de gitub
//estando en la carpeta local de nuestro proyecto
git remote set-url origin git@github.com:andresesposito62/ControlApp.git

//Para ver toda la historia de lo que ha pasado en el repositorio:
git log --all --graph --decorate --oneline
//Para ingresar un shortcut para este comando tan largo:
alias arbol_proyecto="git log --all --graph --decorate --oneline"
//y luego en la consola ejecutamos:
arbol_proyecto

//Para crear un Tag(para este carso version 0.1):
git tag -a v0.1 -m "Mensaje" HashDelCommit

//para ver la lista de todos los tags:
git show-ref --tags

//para enviar un tag al repositorio remoto:
git push origin --tags

//para borrar un tag indeseado en el repo local:
git tag -d nombreDelTag

//para borrar un tag en el repositorio remoto:
git push origin :refs/tags/nombreDelTagABorrar

//el git init es si se quiere crear el repositorio
//Si se desea clonar el repositorio remoto no se debe usar

//Para clonar un repositorio:
git clone linkRepositorioRemoto 
//Si el repositorio es publico no va a pedir contraseña ni usuario

//para guardar temporalmente los cambios:
git stach

//para regresar al stash que teniamos:
git stash pop







